#include<GL/glut.h>
#include<stdio.h>
#include<windows.h>
#include<time.h>
float x, y, x1, y1, x3, y3, x2, y2;

void myinit()
{
	glClear(GL_COLOR_BUFFER_BIT);
	//glutSwapBuffers();
	glClearColor(1.0, 1.0, 1.0, 0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(-500, 500, -500, 500);
}
void putpixel(float c, float d)
{
	glColor3f(0, 1, 1);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2f(c, d);
	glEnd();
}
void putpixel1(float c, float d)
{
	glColor3f(0, 1, 0);
	glPointSize(4);
	glBegin(GL_POINTS);
	glVertex2f(c, d);
	glEnd();
}
void putpixel2(float c, float d)
{
	glColor3f(1, 0, 0);
	glPointSize(4);
	glBegin(GL_POINTS);
	glVertex2f(c, d);
	glEnd();
}
void putpixel3(float c, float d)
{
	glColor3f(0, 0.5, 0.7);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2f(c, d);
	glEnd();
}
void quadratic_curve(float x, float y, float x1, float y1, float x2, float y2)
{
	putpixel1(x, y);
	putpixel1(x1, y1);
	putpixel1(x2, y2);
	float u = 0;
	float xp, yp;

	for (u = 0;u < 1;u = u + 0.01)
	{
		xp = (2 * u*u - 3 * u + 1)*x + (-4 * u*u + 4 * u)*x1 + (2 * u*u - u)*x2;
		yp = (2 * u*u - 3 * u + 1)*y + (-4 * u*u + 4 * u)*y1 + (2 * u*u - u)*y2;
		putpixel3(xp, yp);
	}
}

/*void bezier_cubic(float x, float y, float x1, float y1, float x2, float y2, float x3, float y3)
{
	putpixel1(x, y);
	putpixel1(x1, y1);
	putpixel1(x2, y2);
	putpixel1(x3, y3);
	float xp,yp;
	float u = 0;
	for (u - 0;u < 1;u = u + 0.01)
	{
		xp = (1 - u)*(1 - u)*(1 - u)*x + 3 * u*(1 - u)*(1 - u)*x1 + 3 * u*u*(1 - u)*x2 + u * u*u*x3;
		yp = (1 - u)*(1 - u)*(1 - u)*y + 3 * u*(1 - u)*(1 - u)*y1 + 3 * u*u*(1 - u)*y2 + u * u*u*y3;
		putpixel3(xp,yp);
	}
}
/*void hermite(float x, float y, float x1, float y1)
{
	putpixel1(x, y);
	putpixel2(x1, y1);
	float xp, yp;
	float u = 0;
	for (u = 0;u < 1;u = u + 0.01)
	{
		xp = (2 * u*u*u - 3 * u*u + 1)*x + (-2 * u*u*u + 3 * u*u)*x1 + (u*u*u - 2 * u*u + u)*x + (u*u*u - u * u)*x1;
		yp = (2 * u*u*u - 3 * u*u + 1)*y + (-2 * u*u*u + 3 * u*u)*y1 + (u*u*u - 2 * u*u + u)*y + (u*u*u - u * u)*y1;
		putpixel3(xp, yp);
	}
}*/

void bezeir_taylor(float x, float y, float x1, float y1, float x2, float y2, float x3, float y3)
{
	putpixel1(x, y);
	putpixel1(x1, y1);
	putpixel1(x2, y2);
	putpixel1(x3, y3);
	float xp, yp;
	float u = 0;
	for (u = 0;u < 1;u = u + 0.01)
	{
		xp = x + (3 * x1 - 3 * x)*u + ((6 * x - 12 * x1 + 6 * x2)*u*u)/2 + ((-6 * x + 18 * x1 - 18 * x2 + 6 * x3)*u*u*u)/6;
		yp = y + (3 * y1 - 3 * y)*u + ((6 * y - 12 * y1 + 6 * y2)*u*u)/2 + ((-6 * y + 18 * y1 - 18 * y2 + 6 * y3)*u*u*u)/6;
		putpixel3(xp, yp);
	}
}
void draw()
{
	//hermite(20, 30, 400, 40);
	//bezier_cubic(20,0,40,40,100,100,400,0);
	bezeir_taylor(20, 0, 40, 40, 100, 100, 400, 0);
	//quadratic_curve(10,1,60,90,190,4);
	glFlush();
}

void main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(900, 900);
	glutInitWindowPosition(20, 20);
	glutCreateWindow("PROJECT Curves");
	myinit();
	glutDisplayFunc(draw);
	glutMainLoop();
}