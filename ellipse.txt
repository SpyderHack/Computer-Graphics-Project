#include<GL/glut.h>
#include<stdio.h>
#include<windows.h>
#include<time.h>
int xc, yc, rx, ry;

void myinit()
{
	glClear(GL_COLOR_BUFFER_BIT);
	//glutSwapBuffers();
	glClearColor(1.0, 1.0, 1.0, 0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(-500, 500, -500, 500);
}
void putpixel(int c, int d)
{
	glColor3f(0, 1, 1);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2i(c, d);
	glEnd();
}
void putpixel1(int c, int d)
{
	glColor3f(0, 1, 0);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2i(c, d);
	glEnd();
}
void putpixel2(int c, int d)
{
	glColor3f(1, 0, 0);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2i(c, d);
	glEnd();
}
void putpixel3(int c, int d)
{
	glColor3f(0, 0.5, 0.7);
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2i(c, d);
	glEnd();
}

void ellipse(int xc, int yc, int rx, int ry)
{
	;
	int x, y, p;
	x = 0;
	y = ry;
	p = (ry*ry) - (rx*rx*ry) + ((rx*rx) / 4);
	while ((2 * x*ry*ry)<(2 * y*rx*rx))
	{
		putpixel(xc + x, yc - y);
		Delay(10);
		putpixel1(xc - x, yc + y);
		Sleep(10);
		putpixel2(xc + x, yc + y);
		Sleep(10);
		putpixel3(xc - x, yc - y);
		Sleep(10);

		if (p<0)
		{
			x = x + 1;
			p = p + (2 * ry*ry*x) + (ry*ry);
		}
		else
		{
			x = x + 1;
			y = y - 1;
			p = p + (2 * ry*ry*x + ry * ry) - (2 * rx*rx*y);
		}
	}
	p = (x + 0.5)*(x + 0.5)*ry*ry + (y - 1)*(y - 1)*rx*rx - rx * rx*ry*ry;

	while (y >= 0)
	{
		putpixel(xc + x, yc - y);
		Sleep(10);
		putpixel1(xc - x, yc + y);
		Sleep(10);
		putpixel2(xc + x, yc + y);
		Sleep(10);
		putpixel3(xc - x, yc - y);
		Sleep(10);

		if (p>0)
		{
			y = y - 1;
			p = p - (2 * rx*rx*y) + (rx*rx);

		}
		else
		{
			y = y - 1;
			x = x + 1;
			p = p + (2 * ry*ry*x) - (2 * rx*rx*y) - (rx*rx);
		}
	}
	glFlush();
}

void drawe()
{
	for (int i = 0;i<3;i++)
	{
		ellipse(xc, yc, rx + 10 * i, ry);
		Sleep(50);
	}
	glFlush();
}

void main(int argc, char **argv)
{
	printf("enter the coordinates: \n");
	printf("Enter Xc=\n");
	scanf_s("%d", &xc);
	printf("Enter Yc=\n");
	scanf_s("%d", &yc);
	printf("Enter a=\n");
	scanf_s("%d", &rx);
	printf("Enter b=\n");
	scanf_s("%d", &ry);
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(900, 900);
	glutInitWindowPosition(20, 20);
	glutCreateWindow("PROJECT CIRCLE");
	myinit();
	glutDisplayFunc(drawe);
	glutMainLoop();
}